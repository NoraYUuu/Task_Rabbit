// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentUserGuideBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Guideline guideline31;

  @NonNull
  public final Guideline guideline32;

  @NonNull
  public final Guideline guideline33;

  @NonNull
  public final TextView textView14;

  @NonNull
  public final TextView textView15;

  private FragmentUserGuideBinding(@NonNull ConstraintLayout rootView,
      @NonNull Guideline guideline31, @NonNull Guideline guideline32,
      @NonNull Guideline guideline33, @NonNull TextView textView14, @NonNull TextView textView15) {
    this.rootView = rootView;
    this.guideline31 = guideline31;
    this.guideline32 = guideline32;
    this.guideline33 = guideline33;
    this.textView14 = textView14;
    this.textView15 = textView15;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentUserGuideBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentUserGuideBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_user_guide, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentUserGuideBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.guideline31;
      Guideline guideline31 = rootView.findViewById(id);
      if (guideline31 == null) {
        break missingId;
      }

      id = R.id.guideline32;
      Guideline guideline32 = rootView.findViewById(id);
      if (guideline32 == null) {
        break missingId;
      }

      id = R.id.guideline33;
      Guideline guideline33 = rootView.findViewById(id);
      if (guideline33 == null) {
        break missingId;
      }

      id = R.id.textView14;
      TextView textView14 = rootView.findViewById(id);
      if (textView14 == null) {
        break missingId;
      }

      id = R.id.textView15;
      TextView textView15 = rootView.findViewById(id);
      if (textView15 == null) {
        break missingId;
      }

      return new FragmentUserGuideBinding((ConstraintLayout) rootView, guideline31, guideline32,
          guideline33, textView14, textView15);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
